/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 17 23:56:54 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MazeSolver_ESTest extends MazeSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = MazeSolver.endrow;
      int[] intArray0 = MazeSolver.shortestpath;
      int[][] intArray1 = MazeSolver.myMaze;
      int[][] intArray2 = MazeSolver.myMaze;
      MazeSolver mazeSolver0 = new MazeSolver();
      mazeSolver0.endcol = 8;
      mazeSolver0.startcol = 1;
      mazeSolver0.findpath(1, (-857), intArray0, 1);
      MazeSolver mazeSolver1 = new MazeSolver();
      mazeSolver0.startcol = 1;
      MazeSolver.numcols = 1;
      mazeSolver0.findpath((-857), (-1545), intArray0, 1);
      mazeSolver0.myMaze = intArray2;
      MazeSolver.shortestlength = 743;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "H7vHG-]d?QMF2lb";
      MazeSolver.main(stringArray0);
      mazeSolver0.showmypath(intArray0, 0);
      int int1 = MazeSolver.endcol;
      MazeSolver.main(stringArray0);
      mazeSolver0.findpath((-1545), 1, intArray0, 0);
      MazeSolver.startrow = 85;
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = MazeSolver.endrow;
      int[] intArray0 = MazeSolver.shortestpath;
      int[][] intArray1 = MazeSolver.myMaze;
      int[][] intArray2 = MazeSolver.myMaze;
      MazeSolver mazeSolver0 = new MazeSolver();
      mazeSolver0.endcol = 8;
      mazeSolver0.startcol = 1;
      // Undeclared exception!
      try { 
        mazeSolver0.findpath(1, 8, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         assertThrownBy("MazeSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = MazeSolver.shortestpath;
      MazeSolver.numcols = 87;
      MazeSolver mazeSolver0 = new MazeSolver();
      mazeSolver0.startcol = 87;
      mazeSolver0.endcol = (-1345);
      mazeSolver0.findpath((-1345), (-1345), intArray0, 3);
      int[][] intArray1 = new int[9][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      mazeSolver0.myMaze = intArray1;
      // Undeclared exception!
      try { 
        mazeSolver0.showmypath(intArray0, 87);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MazeSolver.startcol = 0;
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      mazeSolver0.endrow = (-1436);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      mazeSolver0.myMaze = null;
      // Undeclared exception!
      try { 
        mazeSolver0.showmypath(intArray0, 2417);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("MazeSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MazeSolver mazeSolver0 = new MazeSolver();
      // Undeclared exception!
      try { 
        mazeSolver0.beenhere(1885, 1885, (int[]) null, 1885);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 4874;
      mazeSolver0.beenhere(0, 0, intArray0, 3231);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = MazeSolver.endcol;
      MazeSolver.startcol = (-1980);
      MazeSolver.endcol = (-1);
      int int1 = MazeSolver.numcols;
      int int2 = MazeSolver.endcol;
      int int3 = MazeSolver.startrow;
      MazeSolver mazeSolver0 = new MazeSolver();
      mazeSolver0.numcols = 6;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        mazeSolver0.showmypath(intArray0, 1129);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1494;
      intArray0[1] = 0;
      intArray0[2] = (-1088);
      intArray0[3] = (-2937);
      MazeSolver.shortestpath = intArray0;
      MazeSolver mazeSolver0 = new MazeSolver();
      // Undeclared exception!
      try { 
        mazeSolver0.beenhere(1494, 0, MazeSolver.shortestpath, 1016);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[2];
      intArray0[0] = (-3483);
      intArray0[1] = 0;
      mazeSolver0.beenhere(0, (-3483), intArray0, (-3483));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = MazeSolver.endcol;
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      // Undeclared exception!
      try { 
        mazeSolver0.findpath(6, 6, intArray0, 1078);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MazeSolver.endcol = 0;
      int int0 = MazeSolver.startcol;
      int[] intArray0 = MazeSolver.shortestpath;
      MazeSolver.startrow = (-79);
      MazeSolver.startcol = 0;
      int int1 = MazeSolver.startcol;
      MazeSolver.endcol = 0;
      int[][] intArray1 = MazeSolver.myMaze;
      MazeSolver.numcols = (-1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ")";
      stringArray0[2] = "g@Dn;g&fZqo?JU";
      stringArray0[3] = "S";
      stringArray0[4] = ",8,&9K";
      stringArray0[5] = "0tj\"*#.px6(Y";
      // Undeclared exception!
      try { 
        MazeSolver.main(stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("MazeSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = MazeSolver.endcol;
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[1];
      mazeSolver0.findpath(10, 6, intArray0, 324);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[5];
      intArray0[0] = (-671);
      intArray0[1] = (-671);
      mazeSolver0.myMaze = null;
      intArray0[2] = (-671);
      mazeSolver0.endcol = (-213);
      // Undeclared exception!
      try { 
        mazeSolver0.findpath(1, 0, intArray0, (-213));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("MazeSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MazeSolver.numrows = 9;
      int int0 = MazeSolver.startcol;
      // Undeclared exception!
      try { 
        MazeSolver.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("MazeSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[3];
      mazeSolver0.endcol = 4081;
      mazeSolver0.startrow = 0;
      intArray0[0] = 4081;
      intArray0[1] = 0;
      mazeSolver0.numcols = 0;
      intArray0[2] = 4081;
      mazeSolver0.findpath(817, 4081, intArray0, 0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MazeSolver.main(stringArray0);
      int int0 = MazeSolver.endrow;
      MazeSolver.endrow = 1;
      mazeSolver0.startrow = 0;
      MazeSolver.numrows = (-3431);
      mazeSolver0.showmypath(intArray0, (-3431));
      MazeSolver.main((String[]) null);
      MazeSolver.main((String[]) null);
      mazeSolver0.findpath(1, 817, intArray0, (-1596));
      MazeSolver.main((String[]) null);
      mazeSolver0.beenhere((-3431), 1, intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MazeSolver mazeSolver0 = new MazeSolver();
      int int0 = MazeSolver.endcol;
      mazeSolver0.findpath(6, 544, (int[]) null, 544);
      int int1 = MazeSolver.startcol;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MazeSolver mazeSolver0 = new MazeSolver();
      mazeSolver0.numrows = (-2304);
      mazeSolver0.endrow = (-2324);
      mazeSolver0.startcol = (-583);
      int[] intArray0 = new int[0];
      mazeSolver0.shortestpath = intArray0;
      int[] intArray1 = new int[2];
      intArray1[0] = (-583);
      intArray1[1] = (-583);
      mazeSolver0.shortestpath = intArray1;
      mazeSolver0.showmypath(intArray0, 1);
      int int0 = MazeSolver.endrow;
      MazeSolver.shortestlength = (-2304);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MazeSolver.shortestpath = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tcv@EC";
      stringArray0[1] = "";
      stringArray0[2] = "rQ9UK>;J,YmK";
      stringArray0[3] = "[=%p6cq1VpP4X%\"";
      stringArray0[4] = "";
      stringArray0[5] = "HSa86$|L%=}\"";
      // Undeclared exception!
      try { 
        MazeSolver.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("MazeSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = MazeSolver.endrow;
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        mazeSolver0.findpath(1, 1, intArray0, (-4125));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("MazeSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[4] = 0;
      mazeSolver0.findpath(0, 0, intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = MazeSolver.shortestpath;
      String[] stringArray0 = new String[8];
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        MazeSolver.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("MazeSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = MazeSolver.startcol;
      int int1 = MazeSolver.endrow;
      MazeSolver mazeSolver0 = new MazeSolver();
      int[] intArray0 = new int[7];
      mazeSolver0.numrows = 1;
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 3;
      mazeSolver0.endcol = 1;
      intArray0[5] = 1;
      mazeSolver0.endcol = 3;
      int[][] intArray1 = new int[7][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray2 = new int[1];
      intArray2[0] = 3;
      intArray1[6] = intArray2;
      mazeSolver0.myMaze = intArray1;
      intArray0[6] = 3;
      // Undeclared exception!
      try { 
        mazeSolver0.showmypath(intArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         assertThrownBy("MazeSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = MazeSolver.shortestpath;
      MazeSolver.numrows = (-668);
      int int0 = MazeSolver.numcols;
      MazeSolver mazeSolver0 = new MazeSolver();
      MazeSolver mazeSolver1 = new MazeSolver();
      mazeSolver1.numcols = (-668);
      int[][] intArray1 = MazeSolver.myMaze;
      MazeSolver.endcol = (-1654);
      MazeSolver.startcol = (-1654);
      int int1 = MazeSolver.startcol;
      MazeSolver mazeSolver2 = new MazeSolver();
      MazeSolver.startcol = (-2249);
      mazeSolver1.findpath(338, 10, (int[]) null, (-2249));
      int int2 = MazeSolver.endcol;
      int int3 = MazeSolver.numcols;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = MazeSolver.endrow;
      int[] intArray0 = MazeSolver.shortestpath;
      int[][] intArray1 = MazeSolver.myMaze;
      int[][] intArray2 = MazeSolver.myMaze;
      MazeSolver mazeSolver0 = new MazeSolver();
      mazeSolver0.endcol = 8;
      mazeSolver0.startcol = 1;
      mazeSolver0.findpath(1, (-857), intArray0, 1);
      mazeSolver0.startcol = (-857);
      MazeSolver.numcols = 8;
      mazeSolver0.findpath((-857), (-1545), intArray0, 8);
      mazeSolver0.myMaze = intArray2;
      MazeSolver.shortestlength = 743;
      String[] stringArray0 = new String[3];
      stringArray0[2] = "H7vHG-]d?QMF2lb";
      MazeSolver.main(stringArray0);
      mazeSolver0.showmypath(intArray0, 0);
      int int1 = MazeSolver.endcol;
      MazeSolver.main(stringArray0);
      mazeSolver0.findpath((-1545), 1, intArray0, 0);
      MazeSolver.startrow = 85;
      mazeSolver0.findpath(2578, (-857), intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[][] intArray0 = MazeSolver.myMaze;
      MazeSolver.numcols = 3;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OcHEQz@NFYy-gCMyog";
      stringArray0[3] = "";
      stringArray0[5] = "B=-sUsQs_ZUq";
      stringArray0[6] = "o";
      MazeSolver.main(stringArray0);
      MazeSolver.numrows = (-1);
  }
}
